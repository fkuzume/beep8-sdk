/**
 * @file hif.h
 * @brief Human Interface definitions for the BEEP-8 system.
 *
 * This file contains definitions for the Human Interface (HIF) system,
 * including gamepad, keyboard, touch, and mouse functionalities. It provides
 * macros for accessing various HIF registers and enumerations for handling
 * different HIF events.
 *
 * The HIF system allows interaction with gamepads, keyboards, and touch/mouse
 * inputs, enabling the detection of button presses, directional inputs, and
 * touch/mouse events.
 *
 * For more detailed information, please refer to the BEEP-8 data sheet.
 */

#pragma once
#ifdef __cplusplus
extern "C" {
#endif
#include <b8/type.h>
#include <b8/register.h>
#include <stddef.h>

/* Gamepad button status bits */
#define B8_HIF_PAD_STATUS_START   (1 << 0)
#define B8_HIF_PAD_STATUS_SELECT  (1 << 1)
#define B8_HIF_PAD_STATUS_LEFT    (1 << 2)
#define B8_HIF_PAD_STATUS_UP      (1 << 3)
#define B8_HIF_PAD_STATUS_RIGHT   (1 << 4)
#define B8_HIF_PAD_STATUS_DOWN    (1 << 5)
#define B8_HIF_PAD_STATUS_BTN_A   (1 << 6)
#define B8_HIF_PAD_STATUS_BTN_B   (1 << 7)

/* Alias for button names */
#define B8_HIF_PAD_STATUS_BTN_X B8_HIF_PAD_STATUS_BTN_A
#define B8_HIF_PAD_STATUS_BTN_Z B8_HIF_PAD_STATUS_BTN_B

#define B8_HIF_ADDR (0xffffa000)

/**
 * @brief Access the gamepad input register.
 *
 * Each bit in the register represents the status of a specific button:
 * - `B8_HIF_PAD_STATUS_START`: Start button
 * - `B8_HIF_PAD_STATUS_SELECT`: Select button
 * - `B8_HIF_PAD_STATUS_LEFT`: Left button
 *   - Corresponds to the left arrow key if a keyboard is connected.
 * - `B8_HIF_PAD_STATUS_UP`: Up button
 *   - Corresponds to the up arrow key if a keyboard is connected.
 * - `B8_HIF_PAD_STATUS_RIGHT`: Right button
 *   - Corresponds to the right arrow key if a keyboard is connected.
 * - `B8_HIF_PAD_STATUS_DOWN`: Down button
 *   - Corresponds to the down arrow key if a keyboard is connected.
 * - `B8_HIF_PAD_STATUS_BTN_A`: Button A
 *   - Corresponds to the 'x' key if a keyboard is connected.
 * - `B8_HIF_PAD_STATUS_BTN_B`: Button B
 *   - Corresponds to the 'z' key if a keyboard is connected.
 * - `B8_HIF_PAD_STATUS_BTN_X`: X button (alias for Button A)
 * - `B8_HIF_PAD_STATUS_BTN_Z`: O button (alias for Button B)
 *
 * Each bit is active high; a value of '1' indicates the button is pressed.
 *
 * @param n The index of the input register (0 to 3).
 * @return The value of the HIF input register.
 *
 * @note Example usage:
 * ```c
 * if (B8_HIF_PAD(0) & B8_HIF_PAD_STATUS_RIGHT) {
 *     // Right button is pressed
 * }
 * ```
 */
#define B8_HIF_PAD(n) _B8_REG(B8_HIF_ADDR + (n)*4)
#define B8_HIF_PAD0   B8_HIF_PAD(0)
#define B8_HIF_PAD1   B8_HIF_PAD(1)
#define B8_HIF_PAD2   B8_HIF_PAD(2)
#define B8_HIF_PAD3   B8_HIF_PAD(3)

/* Touch and mouse control registers */
#define B8_HIF_TOUCH_CTRL    _B8_REG(B8_HIF_ADDR + 0x40)
#define B8_HIF_TOUCH_CONNECT _B8_REG(B8_HIF_ADDR + 0x44)

/* Keyboard input registers */
#define B8_HIF_KB_ADDR  (B8_HIF_ADDR + 0x20)
#define B8_HIF_KB_RX    _B8_REG(B8_HIF_KB_ADDR + 0x00)
#define B8_HIF_KB_LEN   _B8_REG(B8_HIF_KB_ADDR + 0x08)

/* Keyboard status bits */
#define B8_HIF_KB_STATUS        _B8_REG(B8_HIF_KB_ADDR + 0x10)
#define B8_HIF_KB_STATUS_ALT      (1 << 0)
#define B8_HIF_KB_STATUS_SHIFT    (1 << 1)
#define B8_HIF_KB_STATUS_META     (1 << 2)
#define B8_HIF_KB_STATUS_CONTROL  (1 << 3)

/* Keyboard special key codes */
#define B8_HIF_KB_CODE_BACKSPACE   (8)
#define B8_HIF_KB_CODE_TAB         (9)
#define B8_HIF_KB_CODE_ENTER       (10)
#define B8_HIF_KB_CODE_ESCAPE      (27)
#define B8_HIF_KB_CODE_ARROW_LEFT  (128)
#define B8_HIF_KB_CODE_ARROW_RIGHT (129)
#define B8_HIF_KB_CODE_ARROW_UP    (130)
#define B8_HIF_KB_CODE_ARROW_DOWN  (131)

/**
 * @brief Enumeration of HIF event types.
 *
 * This enumeration defines various event types that can be generated by the HIF system.
 * Events include touch events, mouse events, and other input-related events.
 */
typedef enum {
    B8_HIF_EV_TOUCH_START = 0xf0,
    B8_HIF_EV_TOUCH_MOVE,
    B8_HIF_EV_TOUCH_CANCEL,
    B8_HIF_EV_TOUCH_END,
    B8_HIF_EV_MOUSE_DOWN,
    B8_HIF_EV_MOUSE_MOVE,
    B8_HIF_EV_MOUSE_UP,
    B8_HIF_EV_MOUSE_HOVER_MOVE,
} b8HifEventType;

/**
 * @brief Structure representing a single HIF event.
 *
 * This structure defines a single event generated by the HIF system, including the event type,
 * coordinates, and an identifier.
 */
typedef struct _b8HifEvent {
    b8HifEventType type; /**< Event type */
  s16 xp; /**< X position (4-bit fixed decimal) */
  s16 yp; /**< Y position (4-bit fixed decimal) */
  u8 identifier; //**< `identifier`: A unique identifier for the event (useful for tracking touch points). */
} b8HifEvent;

#define B8_HIF_MAX_TOUCH_EVENTS (32)

/**
 * @brief Structure representing a collection of HIF events.
 *
 * This structure defines a collection of HIF events, including the number of events and an array
 * of individual event structures.
 *
 * - `num`: The number of events currently stored.
 * - `events`: An array of `b8HifEvent` structures.
 */
typedef struct _b8HifEvents {
    size_t num;                          /**< Number of events */
    b8HifEvent events[B8_HIF_MAX_TOUCH_EVENTS]; /**< Array of events */
} b8HifEvents;

/**
 * @brief Retrieve the current HIF events.
 *
 * This function retrieves the current HIF events and stores them in the provided result structure.
 * It safely copies the events from the internal buffer to the user-provided buffer.
 *
 * @param result A pointer to a `b8HifEvents` structure where the events will be stored.
 * @return 0 on success; a negative error code on failure.
 *
 * @retval 0       Success.
 * @retval -EINVAL Invalid argument (e.g., `result` is NULL).
 * @retval Other   Error codes as returned by semaphore functions.
 *
 * @note The function is thread-safe and ensures that the events are copied atomically.
 */
extern int b8HifGetEvents(b8HifEvents* result);

/**
 * @brief Structure representing the current mouse or touch panel status.
 *
 * This structure provides information about the current position and state of
 * the mouse or touch panel. Although the API refers to "mouse," it is also
 * compatible with touch panel inputs. In the case of multiple touch points,
 * the status prioritizes the most recently initiated touch.
 *
 * For example:
 * - If the index finger starts touching at 1 second and ends at 5 seconds,
 *   and the middle finger starts touching at 3 seconds and ends at 4 seconds:
 *   - From 1 second to 3 seconds, the position corresponds to the index finger.
 *   - From 3 seconds to 4 seconds, the position corresponds to the middle finger.
 *   - After 4 seconds, no touch is detected, and the state resets accordingly.
 *
 * Members:
 * - `mouse_x`: The current X coordinate of the mouse or touch panel (16-bit signed fixed-point number with 4 fractional bits).
 * - `mouse_y`: The current Y coordinate of the mouse or touch panel (16-bit signed fixed-point number with 4 fractional bits).
 * - `is_dragging`: Indicates whether the mouse or touch is in a dragging state (1: dragging, 0: not dragging).
 *
 * @note
 * - The `mouse_x` and `mouse_y` values are 16-bit signed fixed-point numbers with 4 bits dedicated to the fractional part.
 *   To obtain the actual floating-point value, divide by 16. For example, a `mouse_x` value of `160` represents `10.0` (`160 / 16 = 10.0`).
 */
typedef struct _b8HifMouseStatus {
    s16 mouse_x;    /**< Current X coordinate of the mouse or touch panel (16-bit signed fixed-point with 4 fractional bits). */
    s16 mouse_y;    /**< Current Y coordinate of the mouse or touch panel (16-bit signed fixed-point with 4 fractional bits). */
    u8 is_dragging; /**< Dragging state: 1 if dragging, 0 otherwise. */
} b8HifMouseStatus;


/**
 * @brief Retrieve the current mouse or touch panel status.
 *
 * This function returns a pointer to the `b8HifMouseStatus` structure, which contains
 * the current state of the mouse or touch panel. The API handles both mouse and
 * touch panel input, with a priority on the most recently initiated touch.
 *
 * Usage:
 * ```c
 * const b8HifMouseStatus* status = b8HifGetMouseStatus();
 * if (status->is_dragging) {
 *     // Handle dragging
 *     int x = status->mouse_x;
 *     int y = status->mouse_y;
 * }
 * ```
 *
 * @note
 * - The returned pointer points to an internal structure; do not modify its contents.
 * - The function provides real-time information and is updated dynamically based
 *   on input events.
 * - If no touch or mouse activity is detected, the coordinates and state may reset.
 *
 * @return A pointer to the current `b8HifMouseStatus` structure.
 */
extern const b8HifMouseStatus* b8HifGetMouseStatus(void);

#ifdef __cplusplus
}
#endif

