#pragma once

#include <stdio.h>
#include <b8/sys.h>

/**
 * @brief Custom assertion macro for runtime error checking.
 * 
 * This macro checks the given expression and if it evaluates to false,
 * it prints a detailed assertion failure message including the file name,
 * line number, function name, and a custom comment. It then halts execution.
 * 
 * @param expr_ The expression to evaluate.
 * @param comment_ A custom comment to include in the failure message.
 * 
 * @note In C++ projects, it is recommended to include `<assert.h>` and use the standard `assert()` macro
 *       for better compatibility and standardization.
 * 
 * Usage example:
 * @code
 * _ASSERT(x != 0, "x should not be zero");
 * @endcode
 */
#define _ASSERT(expr_, comment_) \
  do { \
    if (!(expr_)) { \
      b8SysPuts("\n=== Assertion failed === "); \
      b8SysPuts(__FILE__); \
      b8SysPuts("("); \
      b8SysPutNum(__LINE__); \
      b8SysPuts(") "); \
      b8SysPuts(__func__); \
      b8SysPuts("() "); \
      b8SysPuts(comment_); \
      b8SysPuts("\n"); \
      void* return_address = __builtin_return_address(0); \
      b8SysPuts("Caller return address: 0x"); \
      b8SysPutHex((u32)return_address); \
      b8SysPuts("\n"); \
      b8SysPuts("System is now halting. Please check the return address for debugging.\n"); \
      b8SysPuts("You can analyze this address using the .map or .lst files generated by the application.\n"); \
      asm("hlt"); \
    } \
  } while(0)


/**
 * @brief Macro for indicating unimplemented functionality.
 * 
 * This macro prints a message indicating that the current function or code block
 * is not implemented yet. It includes the file name, line number, and function name
 * in the message. It then halts execution.
 * 
 * @note In C++ projects, it is recommended to include `<assert.h>` and use the standard `assert()` macro
 *       for better compatibility and standardization.
 * 
 * Usage example:
 * @code
 * _NOTIMPL();
 * @endcode
 */
#define _NOTIMPL() \
  do { \
    printf( "Assertion NOTIMPL %s(%d) %s()\n",__FILE__,__LINE__, __func__ ); \
    asm("hlt"); \
  } while(0)

/**
 * @brief Macro for logging a pass status message.
 * 
 * This macro logs a pass status message with the file name, line number,
 * and function name where it is invoked. It uses the `b8SysPuts` and `b8SysPutNum` 
 * functions to print the message.
 * 
 * @param x Unused parameter for compatibility with the macro format.
 * 
 * Usage example:
 * @code
 * pass(0);
 * @endcode
 */
#define pass(x) \
  do { \
    b8SysPuts( "\n[PASS]");\
    b8SysPuts( __FILE__ );\
    b8SysPuts( " (");\
    b8SysPutNum( __LINE__ );\
    b8SysPuts( ") ");\
    b8SysPuts( __func__ );\
    b8SysPuts( "()");\
    b8SysPutCR(); \
  } while(0)

/**
 * @brief Macro for logging trace information.
 * 
 * This macro logs trace information, including the file name, line number, 
 * function name, and the value of the given expression in both hexadecimal 
 * and decimal formats. It uses the `b8SysPuts`, `b8SysPutNum`, and `b8SysPutHex`
 * functions to print the message.
 * 
 * @param x The expression to log. Its value will be printed in both hexadecimal 
 *          and decimal formats, along with the expression name.
 * 
 * Usage example:
 * @code
 * int value = 42;
 * trace(value);
 * @endcode
 */
#define trace(x) \
  do { \
    b8SysPuts( "\n[TRACE]");\
    b8SysPuts( __FILE__ );\
    b8SysPuts( " (");\
    b8SysPutNum( __LINE__ );\
    b8SysPuts( ") ");\
    b8SysPuts( __func__ );\
    b8SysPuts( "() 0x");\
    b8SysPutHex((x)); \
    b8SysPuts( " = ") ; \
    b8SysPutNum((x));\
    b8SysPuts( " =" #x); \
    b8SysPutCR(); \
  } while(0)

