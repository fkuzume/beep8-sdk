#include <b8/type.h>
#include <b8/ppu.h>
#include <b8/sys.h>
#include <malloc.h>
#include <sublibc.h>
#define NUM_FONT  (96)
static  const u8 _font[ NUM_FONT ][8] = {
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,},
{0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x00,},
{0x6C,0x6C,0x48,0x00,0x00,0x00,0x00,0x00,},
{0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00,},
{0x10,0x7C,0xD0,0x7C,0x16,0x7C,0x10,0x00,},
{0x62,0x66,0x0C,0x18,0x30,0x66,0x46,0x00,},
{0x38,0x6C,0x68,0x76,0xDC,0xCC,0x76,0x00,},
{0x18,0x18,0x30,0x00,0x00,0x00,0x00,0x00,},
{0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00,},
{0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00,},
{0x00,0x6C,0x38,0xFE,0x38,0x6C,0x00,0x00,},
{0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,},
{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x10,},
{0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,},
{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,},
{0x02,0x06,0x0C,0x18,0x30,0x60,0x40,0x00,},
{0x3C,0x66,0x6E,0x76,0x66,0x66,0x3C,0x00,},
{0x18,0x18,0x38,0x18,0x18,0x18,0x3C,0x00,},
{0x7C,0x06,0x06,0x3C,0x60,0x60,0x7E,0x00,},
{0x7C,0x06,0x06,0x1C,0x06,0x06,0x7C,0x00,},
{0x66,0x66,0x66,0x7E,0x06,0x06,0x06,0x00,},
{0x7E,0x60,0x60,0x7C,0x06,0x06,0x7C,0x00,},
{0x3E,0x60,0x60,0x7C,0x66,0x66,0x3C,0x00,},
{0x7E,0x06,0x0C,0x18,0x18,0x18,0x18,0x00,},
{0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00,},
{0x3C,0x66,0x66,0x3E,0x06,0x06,0x7C,0x00,},
{0x00,0x18,0x18,0x00,0x18,0x18,0x00,0x00,},
{0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x10,},
{0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00,},
{0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,},
{0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00,},
{0x3C,0x66,0x06,0x1C,0x18,0x00,0x18,0x00,},
{0x3C,0x66,0x6E,0x6E,0x6E,0x60,0x3E,0x00,},
{0x3C,0x66,0x66,0x7E,0x66,0x66,0x66,0x00,},
{0x7C,0x66,0x66,0x7C,0x66,0x66,0x7C,0x00,},
{0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x00,},
{0x7C,0x66,0x66,0x66,0x66,0x66,0x7C,0x00,},
{0x7E,0x60,0x60,0x78,0x60,0x60,0x7E,0x00,},
{0x7E,0x60,0x60,0x78,0x60,0x60,0x60,0x00,},
{0x3C,0x66,0x60,0x6E,0x66,0x66,0x3C,0x00,},
{0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00,},
{0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,},
{0x0E,0x06,0x06,0x06,0x06,0x66,0x3C,0x00,},
{0x66,0x6C,0x78,0x70,0x78,0x6C,0x66,0x00,},
{0x60,0x60,0x60,0x60,0x60,0x60,0x7E,0x00,},
{0xC6,0xEE,0xFE,0xD6,0xC6,0xC6,0xC6,0x00,},
{0x66,0x76,0x7E,0x6E,0x66,0x66,0x66,0x00,},
{0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00,},
{0x7C,0x66,0x66,0x7C,0x60,0x60,0x60,0x00,},
{0x3C,0x66,0x66,0x66,0x6E,0x6E,0x3E,0x00,},
{0x7C,0x66,0x66,0x7C,0x66,0x66,0x66,0x00,},
{0x3E,0x60,0x60,0x3C,0x06,0x06,0x7C,0x00,},
{0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00,},
{0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00,},
{0x66,0x66,0x66,0x66,0x3C,0x3C,0x18,0x00,},
{0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00,},
{0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00,},
{0x66,0x66,0x66,0x3C,0x18,0x18,0x18,0x00,},
{0x7E,0x06,0x0C,0x18,0x30,0x60,0x7E,0x00,},
{0x3C,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,},
{0x40,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,},
{0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,},
{0x10,0x38,0x6C,0x00,0x00,0x00,0x00,0x00,},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,},
{0x18,0x18,0x08,0x00,0x00,0x00,0x00,0x00,},
{0x00,0x00,0x3C,0x06,0x3E,0x66,0x3E,0x00,},
{0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00,},
{0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00,},
{0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00,},
{0x00,0x00,0x3C,0x66,0x7C,0x60,0x3E,0x00,},
{0x0E,0x18,0x18,0x3C,0x18,0x18,0x3C,0x00,},
{0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x7C,},
{0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x00,},
{0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x00,},
{0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x70,},
{0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0x00,},
{0x30,0x30,0x30,0x30,0x30,0x30,0x1C,0x00,},
{0x00,0x00,0xCC,0xFE,0xD6,0xC6,0xC6,0x00,},
{0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x00,},
{0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00,},
{0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x60,},
{0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x06,},
{0x00,0x00,0x36,0x38,0x30,0x30,0x30,0x00,},
{0x00,0x00,0x3E,0x60,0x3C,0x06,0x7C,0x00,},
{0x18,0x18,0x18,0x3C,0x18,0x18,0x0C,0x00,},
{0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x00,},
{0x00,0x00,0x66,0x66,0x3C,0x3C,0x18,0x00,},
{0x00,0x00,0xC6,0xC6,0xD6,0xFE,0xEC,0x00,},
{0x00,0x00,0x66,0x3C,0x18,0x3C,0x66,0x00,},
{0x00,0x00,0x66,0x66,0x66,0x3E,0x06,0x7C,},
{0x00,0x00,0x7E,0x0C,0x18,0x30,0x7E,0x00,},
{0x1C,0x30,0x30,0x60,0x30,0x30,0x1C,0x00,},
{0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,},
{0x38,0x0C,0x0C,0x06,0x0C,0x0C,0x38,0x00,},
{0x32,0x4C,0x00,0x00,0x00,0x00,0x00,0x00,},
{0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,},
};

static  void  _setpix( u8* b8_image_ , u16 xpix_ , u16 ypix_ , u8 color_ ){
  u8* pw = b8_image_ + (ypix_*64 + (xpix_>>1));
  if(xpix_ & 1){
    *pw &= ~0x0f;
    *pw |= color_;
  } else {
    *pw &= ~0xf0;
    *pw |= (color_<<4);
  }
}
static  u8  _dstxtile = 0;
static  u8  _dstytile = 0;
namespace fontdata {
  static b8PpuBgTile _tile_clear = {};
  b8PpuBgTile  gettc() { // get clear tile 
    return  _tile_clear;
  }

  u8  dstxtile() {
    return  _dstxtile;
  }

  u8  dstytile() {
    return  _dstytile;
  }

  #define BUFFSIZE  (1024)
  bool _is_loaded = false;
  void  load( u8 dstxtile_, u8 dstytile_ ){
    if( _is_loaded ) return;
    _dstxtile = dstxtile_;
    _dstytile = dstytile_;

    static const u16 ascii_letter = (u16)(' '-0x20);
    _tile_clear.XTILE = fontdata::dstxtile() + (ascii_letter&15);
    _tile_clear.YTILE = fontdata::dstytile() + (ascii_letter>>4);

    b8PpuCmd  ppu_cmd;
    u32* ppu_cmd_buff = (u32*)malloc( BUFFSIZE );
    b8PpuCmdSetBuff( &ppu_cmd , ppu_cmd_buff , BUFFSIZE  );
    u8* b8_image = (u8*)mallocz( (128*128)>>1 );

    for( u8 ascii=0 ; ascii < NUM_FONT ; ++ascii ){
      const u16 xs = (ascii&15)<<3;
      const u16 ys = (ascii>>4)<<3;

      // shadow
      for( u16 yline=0 ; yline<8-1 ; ++yline ){
        const u8 fd = _font[ascii][yline]; // font data
        const u16 ypix = ys + yline;
        for( u16 xpix=xs ; xpix<xs+8-1 ; ++xpix ){
          const u8 col = (fd>>(7-(xpix&7)))&1 ? 1:0;
          if( col ) _setpix( b8_image,xpix+1,ypix+1,col);
        }
      }

      for( u16 yline=0 ; yline<8 ; ++yline ){
        const u8 fd = _font[ascii][yline]; // font data
        const u16 ypix = ys + yline;
        for( u16 xpix=xs ; xpix<xs+8 ; ++xpix ){
          const u8 col = (fd>>(7-(xpix&7)))&1 ? 7:0;
          if( col ) _setpix( b8_image,xpix,ypix,col);
        }
      }
    }

    {
      b8PpuLoadimg* pp = b8PpuLoadimgAlloc( &ppu_cmd );
      pp->cpuaddr = b8_image;

      // src
      pp->srcxtile = 0;
      pp->srcytile = 0;
      pp->srcwtile = 16;

      // dst
      pp->dstxtile = _dstxtile;
      pp->dstytile = _dstytile;
      pp->trnwtile = 16;
      pp->trnhtile = 16;
    }

    {
      b8PpuFlush* pp = b8PpuFlushAlloc( &ppu_cmd );
      pp->img = 1;
    }
    b8PpuHaltAlloc( &ppu_cmd );
    b8PpuExec( &ppu_cmd );

    free( b8_image );
    free( ppu_cmd_buff );

    _is_loaded = true;
  }
}
