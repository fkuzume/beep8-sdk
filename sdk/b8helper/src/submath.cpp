#include <fcast.h>
#include <mt.h>
#include <submath.h>

static const s16 sin_tbl[1024+1] = {
/*  0  */  0 ,
/*  1  */  6 ,
/*  2  */  13 ,
/*  3  */  19 ,
/*  4  */  25 ,
/*  5  */  31 ,
/*  6  */  38 ,
/*  7  */  44 ,
/*  8  */  50 ,
/*  9  */  57 ,
/*  10  */  63 ,
/*  11  */  69 ,
/*  12  */  75 ,
/*  13  */  82 ,
/*  14  */  88 ,
/*  15  */  94 ,
/*  16  */  101 ,
/*  17  */  107 ,
/*  18  */  113 ,
/*  19  */  119 ,
/*  20  */  126 ,
/*  21  */  132 ,
/*  22  */  138 ,
/*  23  */  144 ,
/*  24  */  151 ,
/*  25  */  157 ,
/*  26  */  163 ,
/*  27  */  170 ,
/*  28  */  176 ,
/*  29  */  182 ,
/*  30  */  188 ,
/*  31  */  195 ,
/*  32  */  201 ,
/*  33  */  207 ,
/*  34  */  214 ,
/*  35  */  220 ,
/*  36  */  226 ,
/*  37  */  232 ,
/*  38  */  239 ,
/*  39  */  245 ,
/*  40  */  251 ,
/*  41  */  257 ,
/*  42  */  264 ,
/*  43  */  270 ,
/*  44  */  276 ,
/*  45  */  283 ,
/*  46  */  289 ,
/*  47  */  295 ,
/*  48  */  301 ,
/*  49  */  308 ,
/*  50  */  314 ,
/*  51  */  320 ,
/*  52  */  326 ,
/*  53  */  333 ,
/*  54  */  339 ,
/*  55  */  345 ,
/*  56  */  351 ,
/*  57  */  358 ,
/*  58  */  364 ,
/*  59  */  370 ,
/*  60  */  376 ,
/*  61  */  383 ,
/*  62  */  389 ,
/*  63  */  395 ,
/*  64  */  401 ,
/*  65  */  408 ,
/*  66  */  414 ,
/*  67  */  420 ,
/*  68  */  426 ,
/*  69  */  433 ,
/*  70  */  439 ,
/*  71  */  445 ,
/*  72  */  451 ,
/*  73  */  458 ,
/*  74  */  464 ,
/*  75  */  470 ,
/*  76  */  476 ,
/*  77  */  483 ,
/*  78  */  489 ,
/*  79  */  495 ,
/*  80  */  501 ,
/*  81  */  508 ,
/*  82  */  514 ,
/*  83  */  520 ,
/*  84  */  526 ,
/*  85  */  533 ,
/*  86  */  539 ,
/*  87  */  545 ,
/*  88  */  551 ,
/*  89  */  557 ,
/*  90  */  564 ,
/*  91  */  570 ,
/*  92  */  576 ,
/*  93  */  582 ,
/*  94  */  589 ,
/*  95  */  595 ,
/*  96  */  601 ,
/*  97  */  607 ,
/*  98  */  613 ,
/*  99  */  620 ,
/*  100  */  626 ,
/*  101  */  632 ,
/*  102  */  638 ,
/*  103  */  644 ,
/*  104  */  651 ,
/*  105  */  657 ,
/*  106  */  663 ,
/*  107  */  669 ,
/*  108  */  675 ,
/*  109  */  682 ,
/*  110  */  688 ,
/*  111  */  694 ,
/*  112  */  700 ,
/*  113  */  706 ,
/*  114  */  713 ,
/*  115  */  719 ,
/*  116  */  725 ,
/*  117  */  731 ,
/*  118  */  737 ,
/*  119  */  744 ,
/*  120  */  750 ,
/*  121  */  756 ,
/*  122  */  762 ,
/*  123  */  768 ,
/*  124  */  774 ,
/*  125  */  781 ,
/*  126  */  787 ,
/*  127  */  793 ,
/*  128  */  799 ,
/*  129  */  805 ,
/*  130  */  811 ,
/*  131  */  818 ,
/*  132  */  824 ,
/*  133  */  830 ,
/*  134  */  836 ,
/*  135  */  842 ,
/*  136  */  848 ,
/*  137  */  854 ,
/*  138  */  861 ,
/*  139  */  867 ,
/*  140  */  873 ,
/*  141  */  879 ,
/*  142  */  885 ,
/*  143  */  891 ,
/*  144  */  897 ,
/*  145  */  904 ,
/*  146  */  910 ,
/*  147  */  916 ,
/*  148  */  922 ,
/*  149  */  928 ,
/*  150  */  934 ,
/*  151  */  940 ,
/*  152  */  946 ,
/*  153  */  953 ,
/*  154  */  959 ,
/*  155  */  965 ,
/*  156  */  971 ,
/*  157  */  977 ,
/*  158  */  983 ,
/*  159  */  989 ,
/*  160  */  995 ,
/*  161  */  1001 ,
/*  162  */  1007 ,
/*  163  */  1014 ,
/*  164  */  1020 ,
/*  165  */  1026 ,
/*  166  */  1032 ,
/*  167  */  1038 ,
/*  168  */  1044 ,
/*  169  */  1050 ,
/*  170  */  1056 ,
/*  171  */  1062 ,
/*  172  */  1068 ,
/*  173  */  1074 ,
/*  174  */  1080 ,
/*  175  */  1086 ,
/*  176  */  1092 ,
/*  177  */  1099 ,
/*  178  */  1105 ,
/*  179  */  1111 ,
/*  180  */  1117 ,
/*  181  */  1123 ,
/*  182  */  1129 ,
/*  183  */  1135 ,
/*  184  */  1141 ,
/*  185  */  1147 ,
/*  186  */  1153 ,
/*  187  */  1159 ,
/*  188  */  1165 ,
/*  189  */  1171 ,
/*  190  */  1177 ,
/*  191  */  1183 ,
/*  192  */  1189 ,
/*  193  */  1195 ,
/*  194  */  1201 ,
/*  195  */  1207 ,
/*  196  */  1213 ,
/*  197  */  1219 ,
/*  198  */  1225 ,
/*  199  */  1231 ,
/*  200  */  1237 ,
/*  201  */  1243 ,
/*  202  */  1249 ,
/*  203  */  1255 ,
/*  204  */  1261 ,
/*  205  */  1267 ,
/*  206  */  1273 ,
/*  207  */  1279 ,
/*  208  */  1285 ,
/*  209  */  1291 ,
/*  210  */  1297 ,
/*  211  */  1303 ,
/*  212  */  1309 ,
/*  213  */  1315 ,
/*  214  */  1321 ,
/*  215  */  1327 ,
/*  216  */  1332 ,
/*  217  */  1338 ,
/*  218  */  1344 ,
/*  219  */  1350 ,
/*  220  */  1356 ,
/*  221  */  1362 ,
/*  222  */  1368 ,
/*  223  */  1374 ,
/*  224  */  1380 ,
/*  225  */  1386 ,
/*  226  */  1392 ,
/*  227  */  1398 ,
/*  228  */  1404 ,
/*  229  */  1409 ,
/*  230  */  1415 ,
/*  231  */  1421 ,
/*  232  */  1427 ,
/*  233  */  1433 ,
/*  234  */  1439 ,
/*  235  */  1445 ,
/*  236  */  1451 ,
/*  237  */  1457 ,
/*  238  */  1462 ,
/*  239  */  1468 ,
/*  240  */  1474 ,
/*  241  */  1480 ,
/*  242  */  1486 ,
/*  243  */  1492 ,
/*  244  */  1498 ,
/*  245  */  1503 ,
/*  246  */  1509 ,
/*  247  */  1515 ,
/*  248  */  1521 ,
/*  249  */  1527 ,
/*  250  */  1533 ,
/*  251  */  1538 ,
/*  252  */  1544 ,
/*  253  */  1550 ,
/*  254  */  1556 ,
/*  255  */  1562 ,
/*  256  */  1567 ,
/*  257  */  1573 ,
/*  258  */  1579 ,
/*  259  */  1585 ,
/*  260  */  1591 ,
/*  261  */  1596 ,
/*  262  */  1602 ,
/*  263  */  1608 ,
/*  264  */  1614 ,
/*  265  */  1620 ,
/*  266  */  1625 ,
/*  267  */  1631 ,
/*  268  */  1637 ,
/*  269  */  1643 ,
/*  270  */  1648 ,
/*  271  */  1654 ,
/*  272  */  1660 ,
/*  273  */  1666 ,
/*  274  */  1671 ,
/*  275  */  1677 ,
/*  276  */  1683 ,
/*  277  */  1689 ,
/*  278  */  1694 ,
/*  279  */  1700 ,
/*  280  */  1706 ,
/*  281  */  1711 ,
/*  282  */  1717 ,
/*  283  */  1723 ,
/*  284  */  1729 ,
/*  285  */  1734 ,
/*  286  */  1740 ,
/*  287  */  1746 ,
/*  288  */  1751 ,
/*  289  */  1757 ,
/*  290  */  1763 ,
/*  291  */  1768 ,
/*  292  */  1774 ,
/*  293  */  1780 ,
/*  294  */  1785 ,
/*  295  */  1791 ,
/*  296  */  1797 ,
/*  297  */  1802 ,
/*  298  */  1808 ,
/*  299  */  1813 ,
/*  300  */  1819 ,
/*  301  */  1825 ,
/*  302  */  1830 ,
/*  303  */  1836 ,
/*  304  */  1842 ,
/*  305  */  1847 ,
/*  306  */  1853 ,
/*  307  */  1858 ,
/*  308  */  1864 ,
/*  309  */  1870 ,
/*  310  */  1875 ,
/*  311  */  1881 ,
/*  312  */  1886 ,
/*  313  */  1892 ,
/*  314  */  1898 ,
/*  315  */  1903 ,
/*  316  */  1909 ,
/*  317  */  1914 ,
/*  318  */  1920 ,
/*  319  */  1925 ,
/*  320  */  1931 ,
/*  321  */  1936 ,
/*  322  */  1942 ,
/*  323  */  1947 ,
/*  324  */  1953 ,
/*  325  */  1958 ,
/*  326  */  1964 ,
/*  327  */  1970 ,
/*  328  */  1975 ,
/*  329  */  1981 ,
/*  330  */  1986 ,
/*  331  */  1992 ,
/*  332  */  1997 ,
/*  333  */  2002 ,
/*  334  */  2008 ,
/*  335  */  2013 ,
/*  336  */  2019 ,
/*  337  */  2024 ,
/*  338  */  2030 ,
/*  339  */  2035 ,
/*  340  */  2041 ,
/*  341  */  2046 ,
/*  342  */  2052 ,
/*  343  */  2057 ,
/*  344  */  2062 ,
/*  345  */  2068 ,
/*  346  */  2073 ,
/*  347  */  2079 ,
/*  348  */  2084 ,
/*  349  */  2090 ,
/*  350  */  2095 ,
/*  351  */  2100 ,
/*  352  */  2106 ,
/*  353  */  2111 ,
/*  354  */  2117 ,
/*  355  */  2122 ,
/*  356  */  2127 ,
/*  357  */  2133 ,
/*  358  */  2138 ,
/*  359  */  2143 ,
/*  360  */  2149 ,
/*  361  */  2154 ,
/*  362  */  2159 ,
/*  363  */  2165 ,
/*  364  */  2170 ,
/*  365  */  2175 ,
/*  366  */  2181 ,
/*  367  */  2186 ,
/*  368  */  2191 ,
/*  369  */  2197 ,
/*  370  */  2202 ,
/*  371  */  2207 ,
/*  372  */  2213 ,
/*  373  */  2218 ,
/*  374  */  2223 ,
/*  375  */  2228 ,
/*  376  */  2234 ,
/*  377  */  2239 ,
/*  378  */  2244 ,
/*  379  */  2249 ,
/*  380  */  2255 ,
/*  381  */  2260 ,
/*  382  */  2265 ,
/*  383  */  2270 ,
/*  384  */  2276 ,
/*  385  */  2281 ,
/*  386  */  2286 ,
/*  387  */  2291 ,
/*  388  */  2296 ,
/*  389  */  2302 ,
/*  390  */  2307 ,
/*  391  */  2312 ,
/*  392  */  2317 ,
/*  393  */  2322 ,
/*  394  */  2328 ,
/*  395  */  2333 ,
/*  396  */  2338 ,
/*  397  */  2343 ,
/*  398  */  2348 ,
/*  399  */  2353 ,
/*  400  */  2359 ,
/*  401  */  2364 ,
/*  402  */  2369 ,
/*  403  */  2374 ,
/*  404  */  2379 ,
/*  405  */  2384 ,
/*  406  */  2389 ,
/*  407  */  2394 ,
/*  408  */  2399 ,
/*  409  */  2405 ,
/*  410  */  2410 ,
/*  411  */  2415 ,
/*  412  */  2420 ,
/*  413  */  2425 ,
/*  414  */  2430 ,
/*  415  */  2435 ,
/*  416  */  2440 ,
/*  417  */  2445 ,
/*  418  */  2450 ,
/*  419  */  2455 ,
/*  420  */  2460 ,
/*  421  */  2465 ,
/*  422  */  2470 ,
/*  423  */  2475 ,
/*  424  */  2480 ,
/*  425  */  2485 ,
/*  426  */  2490 ,
/*  427  */  2495 ,
/*  428  */  2500 ,
/*  429  */  2505 ,
/*  430  */  2510 ,
/*  431  */  2515 ,
/*  432  */  2520 ,
/*  433  */  2525 ,
/*  434  */  2530 ,
/*  435  */  2535 ,
/*  436  */  2540 ,
/*  437  */  2545 ,
/*  438  */  2550 ,
/*  439  */  2555 ,
/*  440  */  2559 ,
/*  441  */  2564 ,
/*  442  */  2569 ,
/*  443  */  2574 ,
/*  444  */  2579 ,
/*  445  */  2584 ,
/*  446  */  2589 ,
/*  447  */  2594 ,
/*  448  */  2598 ,
/*  449  */  2603 ,
/*  450  */  2608 ,
/*  451  */  2613 ,
/*  452  */  2618 ,
/*  453  */  2623 ,
/*  454  */  2628 ,
/*  455  */  2632 ,
/*  456  */  2637 ,
/*  457  */  2642 ,
/*  458  */  2647 ,
/*  459  */  2652 ,
/*  460  */  2656 ,
/*  461  */  2661 ,
/*  462  */  2666 ,
/*  463  */  2671 ,
/*  464  */  2675 ,
/*  465  */  2680 ,
/*  466  */  2685 ,
/*  467  */  2690 ,
/*  468  */  2694 ,
/*  469  */  2699 ,
/*  470  */  2704 ,
/*  471  */  2709 ,
/*  472  */  2713 ,
/*  473  */  2718 ,
/*  474  */  2723 ,
/*  475  */  2727 ,
/*  476  */  2732 ,
/*  477  */  2737 ,
/*  478  */  2741 ,
/*  479  */  2746 ,
/*  480  */  2751 ,
/*  481  */  2755 ,
/*  482  */  2760 ,
/*  483  */  2765 ,
/*  484  */  2769 ,
/*  485  */  2774 ,
/*  486  */  2779 ,
/*  487  */  2783 ,
/*  488  */  2788 ,
/*  489  */  2792 ,
/*  490  */  2797 ,
/*  491  */  2802 ,
/*  492  */  2806 ,
/*  493  */  2811 ,
/*  494  */  2815 ,
/*  495  */  2820 ,
/*  496  */  2824 ,
/*  497  */  2829 ,
/*  498  */  2833 ,
/*  499  */  2838 ,
/*  500  */  2843 ,
/*  501  */  2847 ,
/*  502  */  2852 ,
/*  503  */  2856 ,
/*  504  */  2861 ,
/*  505  */  2865 ,
/*  506  */  2870 ,
/*  507  */  2874 ,
/*  508  */  2878 ,
/*  509  */  2883 ,
/*  510  */  2887 ,
/*  511  */  2892 ,
/*  512  */  2896 ,
/*  513  */  2901 ,
/*  514  */  2905 ,
/*  515  */  2910 ,
/*  516  */  2914 ,
/*  517  */  2918 ,
/*  518  */  2923 ,
/*  519  */  2927 ,
/*  520  */  2932 ,
/*  521  */  2936 ,
/*  522  */  2940 ,
/*  523  */  2945 ,
/*  524  */  2949 ,
/*  525  */  2953 ,
/*  526  */  2958 ,
/*  527  */  2962 ,
/*  528  */  2967 ,
/*  529  */  2971 ,
/*  530  */  2975 ,
/*  531  */  2979 ,
/*  532  */  2984 ,
/*  533  */  2988 ,
/*  534  */  2992 ,
/*  535  */  2997 ,
/*  536  */  3001 ,
/*  537  */  3005 ,
/*  538  */  3009 ,
/*  539  */  3014 ,
/*  540  */  3018 ,
/*  541  */  3022 ,
/*  542  */  3026 ,
/*  543  */  3031 ,
/*  544  */  3035 ,
/*  545  */  3039 ,
/*  546  */  3043 ,
/*  547  */  3048 ,
/*  548  */  3052 ,
/*  549  */  3056 ,
/*  550  */  3060 ,
/*  551  */  3064 ,
/*  552  */  3068 ,
/*  553  */  3073 ,
/*  554  */  3077 ,
/*  555  */  3081 ,
/*  556  */  3085 ,
/*  557  */  3089 ,
/*  558  */  3093 ,
/*  559  */  3097 ,
/*  560  */  3102 ,
/*  561  */  3106 ,
/*  562  */  3110 ,
/*  563  */  3114 ,
/*  564  */  3118 ,
/*  565  */  3122 ,
/*  566  */  3126 ,
/*  567  */  3130 ,
/*  568  */  3134 ,
/*  569  */  3138 ,
/*  570  */  3142 ,
/*  571  */  3146 ,
/*  572  */  3150 ,
/*  573  */  3154 ,
/*  574  */  3158 ,
/*  575  */  3162 ,
/*  576  */  3166 ,
/*  577  */  3170 ,
/*  578  */  3174 ,
/*  579  */  3178 ,
/*  580  */  3182 ,
/*  581  */  3186 ,
/*  582  */  3190 ,
/*  583  */  3194 ,
/*  584  */  3198 ,
/*  585  */  3202 ,
/*  586  */  3206 ,
/*  587  */  3210 ,
/*  588  */  3214 ,
/*  589  */  3217 ,
/*  590  */  3221 ,
/*  591  */  3225 ,
/*  592  */  3229 ,
/*  593  */  3233 ,
/*  594  */  3237 ,
/*  595  */  3241 ,
/*  596  */  3244 ,
/*  597  */  3248 ,
/*  598  */  3252 ,
/*  599  */  3256 ,
/*  600  */  3260 ,
/*  601  */  3264 ,
/*  602  */  3267 ,
/*  603  */  3271 ,
/*  604  */  3275 ,
/*  605  */  3279 ,
/*  606  */  3282 ,
/*  607  */  3286 ,
/*  608  */  3290 ,
/*  609  */  3294 ,
/*  610  */  3297 ,
/*  611  */  3301 ,
/*  612  */  3305 ,
/*  613  */  3309 ,
/*  614  */  3312 ,
/*  615  */  3316 ,
/*  616  */  3320 ,
/*  617  */  3323 ,
/*  618  */  3327 ,
/*  619  */  3331 ,
/*  620  */  3334 ,
/*  621  */  3338 ,
/*  622  */  3342 ,
/*  623  */  3345 ,
/*  624  */  3349 ,
/*  625  */  3352 ,
/*  626  */  3356 ,
/*  627  */  3360 ,
/*  628  */  3363 ,
/*  629  */  3367 ,
/*  630  */  3370 ,
/*  631  */  3374 ,
/*  632  */  3378 ,
/*  633  */  3381 ,
/*  634  */  3385 ,
/*  635  */  3388 ,
/*  636  */  3392 ,
/*  637  */  3395 ,
/*  638  */  3399 ,
/*  639  */  3402 ,
/*  640  */  3406 ,
/*  641  */  3409 ,
/*  642  */  3413 ,
/*  643  */  3416 ,
/*  644  */  3420 ,
/*  645  */  3423 ,
/*  646  */  3426 ,
/*  647  */  3430 ,
/*  648  */  3433 ,
/*  649  */  3437 ,
/*  650  */  3440 ,
/*  651  */  3444 ,
/*  652  */  3447 ,
/*  653  */  3450 ,
/*  654  */  3454 ,
/*  655  */  3457 ,
/*  656  */  3461 ,
/*  657  */  3464 ,
/*  658  */  3467 ,
/*  659  */  3471 ,
/*  660  */  3474 ,
/*  661  */  3477 ,
/*  662  */  3481 ,
/*  663  */  3484 ,
/*  664  */  3487 ,
/*  665  */  3490 ,
/*  666  */  3494 ,
/*  667  */  3497 ,
/*  668  */  3500 ,
/*  669  */  3504 ,
/*  670  */  3507 ,
/*  671  */  3510 ,
/*  672  */  3513 ,
/*  673  */  3516 ,
/*  674  */  3520 ,
/*  675  */  3523 ,
/*  676  */  3526 ,
/*  677  */  3529 ,
/*  678  */  3532 ,
/*  679  */  3536 ,
/*  680  */  3539 ,
/*  681  */  3542 ,
/*  682  */  3545 ,
/*  683  */  3548 ,
/*  684  */  3551 ,
/*  685  */  3555 ,
/*  686  */  3558 ,
/*  687  */  3561 ,
/*  688  */  3564 ,
/*  689  */  3567 ,
/*  690  */  3570 ,
/*  691  */  3573 ,
/*  692  */  3576 ,
/*  693  */  3579 ,
/*  694  */  3582 ,
/*  695  */  3585 ,
/*  696  */  3588 ,
/*  697  */  3591 ,
/*  698  */  3594 ,
/*  699  */  3597 ,
/*  700  */  3600 ,
/*  701  */  3603 ,
/*  702  */  3606 ,
/*  703  */  3609 ,
/*  704  */  3612 ,
/*  705  */  3615 ,
/*  706  */  3618 ,
/*  707  */  3621 ,
/*  708  */  3624 ,
/*  709  */  3627 ,
/*  710  */  3630 ,
/*  711  */  3633 ,
/*  712  */  3636 ,
/*  713  */  3639 ,
/*  714  */  3642 ,
/*  715  */  3644 ,
/*  716  */  3647 ,
/*  717  */  3650 ,
/*  718  */  3653 ,
/*  719  */  3656 ,
/*  720  */  3659 ,
/*  721  */  3661 ,
/*  722  */  3664 ,
/*  723  */  3667 ,
/*  724  */  3670 ,
/*  725  */  3673 ,
/*  726  */  3675 ,
/*  727  */  3678 ,
/*  728  */  3681 ,
/*  729  */  3684 ,
/*  730  */  3686 ,
/*  731  */  3689 ,
/*  732  */  3692 ,
/*  733  */  3695 ,
/*  734  */  3697 ,
/*  735  */  3700 ,
/*  736  */  3703 ,
/*  737  */  3705 ,
/*  738  */  3708 ,
/*  739  */  3711 ,
/*  740  */  3713 ,
/*  741  */  3716 ,
/*  742  */  3719 ,
/*  743  */  3721 ,
/*  744  */  3724 ,
/*  745  */  3727 ,
/*  746  */  3729 ,
/*  747  */  3732 ,
/*  748  */  3734 ,
/*  749  */  3737 ,
/*  750  */  3739 ,
/*  751  */  3742 ,
/*  752  */  3745 ,
/*  753  */  3747 ,
/*  754  */  3750 ,
/*  755  */  3752 ,
/*  756  */  3755 ,
/*  757  */  3757 ,
/*  758  */  3760 ,
/*  759  */  3762 ,
/*  760  */  3765 ,
/*  761  */  3767 ,
/*  762  */  3770 ,
/*  763  */  3772 ,
/*  764  */  3775 ,
/*  765  */  3777 ,
/*  766  */  3779 ,
/*  767  */  3782 ,
/*  768  */  3784 ,
/*  769  */  3787 ,
/*  770  */  3789 ,
/*  771  */  3791 ,
/*  772  */  3794 ,
/*  773  */  3796 ,
/*  774  */  3798 ,
/*  775  */  3801 ,
/*  776  */  3803 ,
/*  777  */  3805 ,
/*  778  */  3808 ,
/*  779  */  3810 ,
/*  780  */  3812 ,
/*  781  */  3815 ,
/*  782  */  3817 ,
/*  783  */  3819 ,
/*  784  */  3822 ,
/*  785  */  3824 ,
/*  786  */  3826 ,
/*  787  */  3828 ,
/*  788  */  3831 ,
/*  789  */  3833 ,
/*  790  */  3835 ,
/*  791  */  3837 ,
/*  792  */  3839 ,
/*  793  */  3842 ,
/*  794  */  3844 ,
/*  795  */  3846 ,
/*  796  */  3848 ,
/*  797  */  3850 ,
/*  798  */  3852 ,
/*  799  */  3854 ,
/*  800  */  3857 ,
/*  801  */  3859 ,
/*  802  */  3861 ,
/*  803  */  3863 ,
/*  804  */  3865 ,
/*  805  */  3867 ,
/*  806  */  3869 ,
/*  807  */  3871 ,
/*  808  */  3873 ,
/*  809  */  3875 ,
/*  810  */  3877 ,
/*  811  */  3879 ,
/*  812  */  3881 ,
/*  813  */  3883 ,
/*  814  */  3885 ,
/*  815  */  3887 ,
/*  816  */  3889 ,
/*  817  */  3891 ,
/*  818  */  3893 ,
/*  819  */  3895 ,
/*  820  */  3897 ,
/*  821  */  3899 ,
/*  822  */  3901 ,
/*  823  */  3903 ,
/*  824  */  3905 ,
/*  825  */  3907 ,
/*  826  */  3909 ,
/*  827  */  3910 ,
/*  828  */  3912 ,
/*  829  */  3914 ,
/*  830  */  3916 ,
/*  831  */  3918 ,
/*  832  */  3920 ,
/*  833  */  3921 ,
/*  834  */  3923 ,
/*  835  */  3925 ,
/*  836  */  3927 ,
/*  837  */  3929 ,
/*  838  */  3930 ,
/*  839  */  3932 ,
/*  840  */  3934 ,
/*  841  */  3936 ,
/*  842  */  3937 ,
/*  843  */  3939 ,
/*  844  */  3941 ,
/*  845  */  3943 ,
/*  846  */  3944 ,
/*  847  */  3946 ,
/*  848  */  3948 ,
/*  849  */  3949 ,
/*  850  */  3951 ,
/*  851  */  3953 ,
/*  852  */  3954 ,
/*  853  */  3956 ,
/*  854  */  3958 ,
/*  855  */  3959 ,
/*  856  */  3961 ,
/*  857  */  3962 ,
/*  858  */  3964 ,
/*  859  */  3965 ,
/*  860  */  3967 ,
/*  861  */  3969 ,
/*  862  */  3970 ,
/*  863  */  3972 ,
/*  864  */  3973 ,
/*  865  */  3975 ,
/*  866  */  3976 ,
/*  867  */  3978 ,
/*  868  */  3979 ,
/*  869  */  3981 ,
/*  870  */  3982 ,
/*  871  */  3984 ,
/*  872  */  3985 ,
/*  873  */  3987 ,
/*  874  */  3988 ,
/*  875  */  3989 ,
/*  876  */  3991 ,
/*  877  */  3992 ,
/*  878  */  3994 ,
/*  879  */  3995 ,
/*  880  */  3996 ,
/*  881  */  3998 ,
/*  882  */  3999 ,
/*  883  */  4001 ,
/*  884  */  4002 ,
/*  885  */  4003 ,
/*  886  */  4005 ,
/*  887  */  4006 ,
/*  888  */  4007 ,
/*  889  */  4008 ,
/*  890  */  4010 ,
/*  891  */  4011 ,
/*  892  */  4012 ,
/*  893  */  4014 ,
/*  894  */  4015 ,
/*  895  */  4016 ,
/*  896  */  4017 ,
/*  897  */  4019 ,
/*  898  */  4020 ,
/*  899  */  4021 ,
/*  900  */  4022 ,
/*  901  */  4023 ,
/*  902  */  4024 ,
/*  903  */  4026 ,
/*  904  */  4027 ,
/*  905  */  4028 ,
/*  906  */  4029 ,
/*  907  */  4030 ,
/*  908  */  4031 ,
/*  909  */  4032 ,
/*  910  */  4034 ,
/*  911  */  4035 ,
/*  912  */  4036 ,
/*  913  */  4037 ,
/*  914  */  4038 ,
/*  915  */  4039 ,
/*  916  */  4040 ,
/*  917  */  4041 ,
/*  918  */  4042 ,
/*  919  */  4043 ,
/*  920  */  4044 ,
/*  921  */  4045 ,
/*  922  */  4046 ,
/*  923  */  4047 ,
/*  924  */  4048 ,
/*  925  */  4049 ,
/*  926  */  4050 ,
/*  927  */  4051 ,
/*  928  */  4052 ,
/*  929  */  4053 ,
/*  930  */  4053 ,
/*  931  */  4054 ,
/*  932  */  4055 ,
/*  933  */  4056 ,
/*  934  */  4057 ,
/*  935  */  4058 ,
/*  936  */  4059 ,
/*  937  */  4060 ,
/*  938  */  4060 ,
/*  939  */  4061 ,
/*  940  */  4062 ,
/*  941  */  4063 ,
/*  942  */  4064 ,
/*  943  */  4064 ,
/*  944  */  4065 ,
/*  945  */  4066 ,
/*  946  */  4067 ,
/*  947  */  4067 ,
/*  948  */  4068 ,
/*  949  */  4069 ,
/*  950  */  4070 ,
/*  951  */  4070 ,
/*  952  */  4071 ,
/*  953  */  4072 ,
/*  954  */  4072 ,
/*  955  */  4073 ,
/*  956  */  4074 ,
/*  957  */  4074 ,
/*  958  */  4075 ,
/*  959  */  4076 ,
/*  960  */  4076 ,
/*  961  */  4077 ,
/*  962  */  4077 ,
/*  963  */  4078 ,
/*  964  */  4079 ,
/*  965  */  4079 ,
/*  966  */  4080 ,
/*  967  */  4080 ,
/*  968  */  4081 ,
/*  969  */  4081 ,
/*  970  */  4082 ,
/*  971  */  4082 ,
/*  972  */  4083 ,
/*  973  */  4083 ,
/*  974  */  4084 ,
/*  975  */  4084 ,
/*  976  */  4085 ,
/*  977  */  4085 ,
/*  978  */  4086 ,
/*  979  */  4086 ,
/*  980  */  4087 ,
/*  981  */  4087 ,
/*  982  */  4088 ,
/*  983  */  4088 ,
/*  984  */  4088 ,
/*  985  */  4089 ,
/*  986  */  4089 ,
/*  987  */  4089 ,
/*  988  */  4090 ,
/*  989  */  4090 ,
/*  990  */  4090 ,
/*  991  */  4091 ,
/*  992  */  4091 ,
/*  993  */  4091 ,
/*  994  */  4092 ,
/*  995  */  4092 ,
/*  996  */  4092 ,
/*  997  */  4092 ,
/*  998  */  4093 ,
/*  999  */  4093 ,
/*  1000  */  4093 ,
/*  1001  */  4093 ,
/*  1002  */  4094 ,
/*  1003  */  4094 ,
/*  1004  */  4094 ,
/*  1005  */  4094 ,
/*  1006  */  4094 ,
/*  1007  */  4095 ,
/*  1008  */  4095 ,
/*  1009  */  4095 ,
/*  1010  */  4095 ,
/*  1011  */  4095 ,
/*  1012  */  4095 ,
/*  1013  */  4095 ,
/*  1014  */  4096 ,
/*  1015  */  4096 ,
/*  1016  */  4096 ,
/*  1017  */  4096 ,
/*  1018  */  4096 ,
/*  1019  */  4096 ,
/*  1020  */  4096 ,
/*  1021  */  4096 ,
/*  1022  */  4096 ,
/*  1023  */  4096 ,
/*  1024  */  4096 ,
};  /* s16 sin_tbl[1024+1] */

s16 sin_12( u32 th ){
  th &= 4095;
  if( th <= 1024 ) return sin_tbl[ th ];
  if( th <= 2048 ) return sin_tbl[ 2048-th ];
  return -sin_12( th - 2048 );
}

s16 cos_12( u32 th ){
  return  sin_12( th+1024 );
}

fx8 rad_cos_12( fx8 rad, u32 th ){
  rad.set_raw_value(
    rad.raw_value() * cos_12( th )
  );
  rad.asr(12);
  return rad;
}

fx8 rad_sin_12( fx8 rad, u32 th ){
  rad.set_raw_value(
    rad.raw_value() * sin_12( th )
  );
  rad.asr(12);
  return rad;
}

fx8 genrand_min_max_fx8(fx8 min_ , fx8 max_ ){
  fx8 retval;
  retval.set_raw_value(
    genrand_min_max(
      min_.raw_value(),
      max_.raw_value()
    )
  );
  return retval;
}

// Set coordinates
Vec& Vec::set(fx8 x_, fx8 y_) {
    x = x_;
    y = y_;
    return *this;
}

// Add values
Vec& Vec::add(fx8 x_, fx8 y_) {
    x = x + x_;
    y = y + y_;
    return *this;
}

// Subtract values
Vec& Vec::sub(fx8 x_, fx8 y_) {
    x = x - x_;
    y = y - y_;
    return *this;
}

// Multiply by a scalar
Vec& Vec::mul(fx8 v) {
    x = x * v;
    y = y * v;
    return *this;
}

// Divide by a scalar
Vec& Vec::div(fx8 v) {
    if (v == 0) {
      x = 0;
      y = 0;
      return *this;
    }
    x /= v;
    y /= v;
    return *this;
}

// Clamp within specified range
Vec& Vec::clamp(fx8 xLow, fx8 xHigh, fx8 yLow, fx8 yHigh) {
    x = _lim(x, xLow, xHigh);
    y = _lim(y, yLow, yHigh);
    return *this;
}

// Wrap coordinates around range
Vec& Vec::wrap(fx8 xLow, fx8 xHigh, fx8 yLow, fx8 yHigh) {
    x = fpm::fmod(x - xLow, xHigh - xLow) + xLow;
    y = fpm::fmod(y - yLow, yHigh - yLow) + yLow;
    return *this;
}

// Add vector by angle and length
Vec& Vec::addWithAngle(fx8 angle, fx8 length) {
  Vec lpos;
  lpos.setWithAngle(angle,length);
  x += lpos.x;
  y += lpos.y;
  return *this;
}

// Set coordinates to (cos(angle), sin(angle))
Vec& Vec::setWithAngle(fx8 angle, fx8 length) {
  x = length * fpm::cos(angle);  // Set x to cos(angle)
  y = length * fpm::sin(angle);  // Set y to sin(angle)
  return *this;
}

// Swap x and y
Vec& Vec::swapXy() {
    fx8 temp = x;
    x = y;
    y = temp;
    return *this;
}

// Normalize the vector
Vec& Vec::normalize() {
    fx8 len = length();
    if (len != fx8(0)) {
        x = x / len;
        y = y / len;
    }
    return *this;
}

// Rotate by angle
Vec& Vec::rotate(fx8 angle) {
    if (angle == fx8(0)) {
        // No rotation needed if angle is zero
        return *this;
    }
    
    fx8 newX = x * fpm::cos(angle) - y * fpm::sin(angle);
    fx8 newY = x * fpm::sin(angle) + y * fpm::cos(angle);
    x = newX;
    y = newY;
    return *this;
}

// Get angle to another vector
fx8 Vec::angleTo(fx8 x_, fx8 y_) const {
    return fpm::atan2(y_ - y, x_ - x);
}

// Get distance to another vector
fx8 Vec::distanceTo(fx8 x_, fx8 y_) const {
    const fx8 dx = x_ - x;
    const fx8 dy = y_ - y;
    return fpm::sqrt(dx * dx + dy * dy);
}

fx8 Vec::distanceTo( const Vec& xy_ ) const {
    const fx8 dx = xy_.x - x;
    const fx8 dy = xy_.y - y;
    return fpm::sqrt(dx * dx + dy * dy);
}

// Check if inside rectangle
bool Vec::isInRect(fx8 x_, fx8 y_, fx8 width, fx8 height) const {
    return (x >= x_ && x <= x_ + width && y >= y_ && y <= y_ + height);
}

bool Vec::isInRect(const Rect& rc ) const {
    return (x >= rc.x && x <= rc.x + rc.w && y >= rc.y && y <= rc.y + rc.h);
}

// Check equality
bool Vec::equals(const Vec& other) const {
    return (x == other.x && y == other.y);
}

// Floor coordinates
Vec& Vec::floor() {
    x = fpm::floor(x);
    y = fpm::floor(y);
    return *this;
}

// Round coordinates
Vec& Vec::round() {
    x = fpm::round(x);
    y = fpm::round(y);
    return *this;
}

// Ceil coordinates
Vec& Vec::ceil() {
    x = fpm::ceil(x);
    y = fpm::ceil(y);
    return *this;
}

// Get length of the vector
fx8 Vec::length() const {
    return fpm::sqrt(x * x + y * y);
}

// Get angle of the vector
fx8 Vec::angle() const {
    return fpm::atan2(y, x);
}

static constexpr uint32_t inv_tbl[128] = {
  0x00000000, 0x10000000, 0x80000000, 0x55555555, 0x40000000, 0x33333333, 0x2AAAAAAA, 0x24924924,
  0x20000000, 0x1C71C71C, 0x19999999, 0x1745D174, 0x15555555, 0x13B13B13, 0x12492492, 0x11111111,
  0x10000000, 0x0F0F0F0F, 0x0E38E38E, 0x0D79435E, 0x0CCCCCCC, 0x0C30C30C, 0x0BA2E8BA, 0x0B21642C,
  0x0AAAAAAA, 0x0A3D70A3, 0x09D89D89, 0x097B425E, 0x09249249, 0x08D3DCB0, 0x08888888, 0x08421084,
  0x08000000, 0x07C1F07C, 0x07878787, 0x07507507, 0x071C71C7, 0x06EB3E45, 0x06BCA1AF, 0x06906906,
  0x06666666, 0x063E7063, 0x06186186, 0x05F417D0, 0x05D1745D, 0x05B05B05, 0x0590B216, 0x0572620A,
  0x05555555, 0x05397829, 0x051EB851, 0x05050505, 0x04EC4EC4, 0x04D4873E, 0x04BDA12F, 0x04A7904A,
  0x04924924, 0x047DC11F, 0x0469EE58, 0x0456C797, 0x04444444, 0x04325C53, 0x04210842, 0x04104104,
  0x04000000, 0x03F03F03, 0x03E0F83E, 0x03D22635, 0x03C3C3C3, 0x03B5CC0E, 0x03A83A83, 0x039B0AD1,
  0x038E38E3, 0x0381C0E0, 0x03759F22, 0x0369D036, 0x035E50D7, 0x03531DEC, 0x03483483, 0x033D91D2,
  0x03333333, 0x0329161F, 0x031F3831, 0x03159721, 0x030C30C3, 0x03030303, 0x02FA0BE8, 0x02F14990,
  0x02E8BA2E, 0x02E05C0B, 0x02D82D82, 0x02D02D02, 0x02C8590B, 0x02C0B02C, 0x02B93105, 0x02B1DA46,
  0x02AAAAAA, 0x02A3A0FD, 0x029CBC14, 0x0295FAD4, 0x028F5C28, 0x0288DF0C, 0x02828282, 0x027C4597,
  0x02762762, 0x02702702, 0x026A439F, 0x02647C69, 0x025ED097, 0x02593F69, 0x0253C825, 0x024E6A17,
  0x02492492, 0x0243F6F0, 0x023EE08F, 0x0239E0D5, 0x0234F72C, 0x02302302, 0x022B63CB, 0x0226B902,
  0x02222222, 0x021D9EAD, 0x02192E29, 0x0214D021, 0x02108421, 0x020C49BA, 0x02082082, 0x02040810,
};

extern uint32_t qmod(uint32_t x, uint32_t N) {
  if( 0 == N )  return 0;
  if ((N & (N - 1)) == 0) return x & (N - 1);

  if( N >= 128 )  return x % N;
  const uint32_t q = (uint64_t(x) * inv_tbl[N]) >> 32;
  const uint32_t remainder = x - q * N;
  return (remainder >= N) ?  remainder - N : remainder; 
}

extern uint32_t qdiv(uint32_t x, uint32_t N) {
  if( N == 0 ) return 0;
  if ((N & (N - 1)) == 0) return x / N;
  if( N >= 128 ) return x / N;
  
  uint32_t q = (uint64_t(x) * inv_tbl[N]) >> 32;
  uint32_t r = x - q * N;
  if( r >= N ) ++q;
  return q;
}

#include <b8/assert.h>
struct Tester {
  u32 state = 0xa5a5a5a5;

  u32 next() {
    state ^= state << 13;
    state ^= state >> 17;
    state ^= state << 5;
    return state;
  }

  Tester() {
    uint32_t TEST_COUNT = 1000;
    std::vector< uint32_t > test_cases = {
      128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536,
      255, 511, 1023, 2047, 4095
    };
    for( int nn=1 ; nn<128 ; ++nn ) test_cases.push_back(nn);

    for (uint32_t N : test_cases) {
      for (uint32_t i = 0; i < TEST_COUNT; ++i) {
        uint32_t x = next();
        uint32_t expected = x % N;
        uint32_t result = qmod(x, N);
        if (result != expected) {
          WATCH(i);
          WATCH(x);
          WATCH(N);
          WATCH(expected);
          WATCH(result);
        }

        _ASSERT(result == expected, "Modulo computation failed");
      }
    }
    b8SysPuts("All tests passed.\n");
  }
};
//Tester tester;
